{"files":{"Webpack.md":{"mtime":1593587331682.905,"size":23,"hash":"47c0bf674e19563bcb27977fd67e1d0695f09395766d56aaa353e83e4590e2b5"},"Shimming.md":{"mtime":1593592024633.482,"size":4048,"hash":"ab0c5f445951ee9c27dba134bfe83d6fe4c690e1ed36a48302a9d1d783e94239"},"polyfill.md":{"mtime":1593588642155.7407,"size":887,"hash":"6ebe4cb0ad4e6c4069fd5626863f1514703a9bd1f79eee2d956d78ddfcc30032"},"ProvidePlugin.md":{"mtime":1593589152725.5383,"size":1296,"hash":"0a2dac6a2c58a27693956c78e2702cc64c127b0f805410f169772c7d76ae5228"},"Tree Shaking.md":{"mtime":1593591740353.737,"size":4283,"hash":"60c4e8767762d27c6c07218598d0b17492c8f5814b9b26efbd0e49edb1cb815d"},"static structure.md":{"mtime":1593591079430.3477,"size":5545,"hash":"bc0ad4d353cae0d65323b252ba50a75174cc413553d4c437ce233835f69ac949"},"dead-code elimination.md":{"mtime":1593590109722.005,"size":787,"hash":"57e0582c46267c30331a98d523f9b4603124124013949446a9f2c67cf9968333"},"compact bundling.md":{"mtime":1593590349565.4836,"size":574,"hash":"c30ae9f33dcd782ec7f8daba44baef13e4f35fbb93f713b183d00099ba3afb24"},"imports-loader.md":{"mtime":1593592077448.5688,"size":385,"hash":"3b137b5ccbe7366b16bef70ce2885f2a33e60fbbe288f0c06aa33505899d8d96"},"redux.md":{"mtime":1593874411640.3438,"size":3972,"hash":"76c0690661104790ce601d3827ac25bf92869b85ff04983fcd62fe3b72716681"},"reducers.md":{"mtime":1593914293875.4597,"size":7689,"hash":"c46b8e01f7b85e58607005d2ab33fbf075a195b5969febb6a841f74914ca9e31"},"normalizr.md":{"mtime":1593872201705.6536,"size":42,"hash":"6c897890e92b04d20d28c2f624d009a0a50778cbe7aa1042ec36ebf93923d2f2"},"actions.md":{"mtime":1593872445776.4639,"size":1968,"hash":"c2f5085ebf113a1f94bded73ae0431051c9b660d348f01bef9318538005eee93"},"store.md":{"mtime":1593873828558.4814,"size":580,"hash":"8798ac71cd648e63022ff1aa183974036c9a7e82f8e10236febbaa957c24b0bc"},"data-flow.md":{"mtime":1593913766095.9612,"size":2438,"hash":"b490e7fea0538f267a9dc69f8fdd94bf08ceae613e9be16d6c20ffe00802fa14"},"react-redux.md":{"mtime":1593916385342.505,"size":5843,"hash":"4461b62b597e4b5a5512f57ff91522d4a8f470a045a68795299a7119c8faf94d"},"presentational-and-container-components.md":{"mtime":1593914005107.764,"size":70,"hash":"3ae19da77a9dfe16da9200575c2b4857da08b292ceaf6cf73c658024b56235d6"},"thinking-in-react.md":{"mtime":1593914396594.686,"size":47,"hash":"06baea3eff45df4f575a194e901ee3a014b1a4e1be43c8934bb67c3b29b25d1e"},"async-actions.md":{"mtime":1594010038157.8677,"size":0,"hash":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"},"higher-order-components.md":{"mtime":1594536659767.5952,"size":16562,"hash":"86ccf351c0f933dbc0e20dcbbc5525bddc37de927d394703a0baeb168fe4c851"},"hook.md":{"mtime":1594549638919.5256,"size":2450,"hash":"15fbfc261c8c41e3db8d9c60443c8e76a5f710a7511c5ea1ffe9a046b589e286"},"Untitled.md":{"mtime":1594536645010.7642,"size":0,"hash":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"},"hooks-at-a-glance.md":{"mtime":1594539661155.6194,"size":8125,"hash":"a64c5d025f0c26544102d0a7d7e2ac525603b7ace75e5de95558b6b90a8c161c"},"array-destructuring.md":{"mtime":1594538145127.1853,"size":143,"hash":"1f644032be5aca1716ef894ac8d59006c00c86a44139b4e5d8433f26b6119371"},"building-your-own-hooks.md":{"mtime":1594549621014.8342,"size":9107,"hash":"59f4efe96a8028b069b52e364d4a188ec48ca647f093971d93cb3b1af038383d"},"using-the-state-hook.md":{"mtime":1594541654497.661,"size":6284,"hash":"53ab3dcda42efe2ff63d96e21b642035c754a32aadade020a6c9e923263ed997"},"using-the-effect-hook.md":{"mtime":1594546305704.6423,"size":17193,"hash":"25faa155ee521ac7ec6266c12887f2ceab76b8c6a173e920dfea988100e03e60"},"rules-of-hooks.md":{"mtime":1594547048172.1648,"size":3787,"hash":"25883759c3a0f2dd9588e2b550813386eefb9ce625a5681991598988ecc130c8"},"hooks-API-reference.md":{"mtime":1594549857474.017,"size":44,"hash":"51ea1660532d16dc498ac0909722dab2bacc0ab451c5f1283eb9a18cb6395ccd"},"basic-hooks.md":{"mtime":1594549834592.6016,"size":74,"hash":"a7d36d0473057b755f821fee394d86c61a5bf773ca574e22bacdbb6b3746d1d7"},"additional-hooks.md":{"mtime":1594549861820.4421,"size":129,"hash":"e93321e9b6d8d7cbe58424f9a01092b71ac23368ca4e85c7b08c3937965ff6de"},"test/Test.md":{"mtime":1594804285003.113,"size":9,"hash":"c848c7c3a9fcf7c6fe4c6476aa490578602b2768c9072fe0c22aeabf7c0332c5"},"2020-07-15.md":{"mtime":1594804314110.5586,"size":0,"hash":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"}},"metadata":{"47c0bf674e19563bcb27977fd67e1d0695f09395766d56aaa353e83e4590e2b5":{"links":[{"line":0,"link":"Shimming","original":"[[Shimming]]","displayText":"","beforeContext":"Shimming : ","afterContext":""}],"embeds":[],"tags":[],"headings":[]},"6ebe4cb0ad4e6c4069fd5626863f1514703a9bd1f79eee2d956d78ddfcc30032":{"links":[],"embeds":[],"tags":[],"headings":[]},"0a2dac6a2c58a27693956c78e2702cc64c127b0f805410f169772c7d76ae5228":{"links":[{"line":32,"link":"missing jQuery in React","original":"[[missing jQuery in React]]","displayText":"","beforeContext":"Usage: ","afterContext":"To automatically load jquery we can simply point both variables it exposes to the corresponding node module:"},{"line":53,"link":"provide Lodash Map global;","original":"[[ provide Lodash Map global;]]","displayText":"","beforeContext":"Usage: ","afterContext":""}],"embeds":[],"tags":[],"headings":[]},"57e0582c46267c30331a98d523f9b4603124124013949446a9f2c67cf9968333":{"links":[],"embeds":[],"tags":[],"headings":[]},"c30ae9f33dcd782ec7f8daba44baef13e4f35fbb93f713b183d00099ba3afb24":{"links":[],"embeds":[],"tags":[],"headings":[]},"bc0ad4d353cae0d65323b252ba50a75174cc413553d4c437ce233835f69ac949":{"links":[{"line":24,"link":"dead-code elimination","original":"[[dead-code elimination]]","displayText":"","beforeContext":"Benefit:  ","afterContext":" during bundlin"},{"line":26,"link":"compact bundling","original":"[[compact bundling]]","displayText":"","beforeContext":"Benefit: ","afterContext":", no custom bundle format"}],"embeds":[],"tags":[],"headings":[{"line":24,"heading":"Benefit:  [[dead-code elimination]] during bundlin","level":4},{"line":26,"heading":"Benefit: [[compact bundling]], no custom bundle format","level":4},{"line":28,"heading":"Benefit: faster lookup of imports","level":4},{"line":45,"heading":"Benefit: variable checking","level":4},{"line":55,"heading":"Benefit: ready for macros","level":4},{"line":89,"heading":"Benefit: ready for types","level":4},{"line":94,"heading":"Support for both synchronous and asynchronous loading","level":4},{"line":97,"heading":"Support for cyclic dependencies between modules","level":4}]},"60c4e8767762d27c6c07218598d0b17492c8f5814b9b26efbd0e49edb1cb815d":{"links":[{"line":0,"link":"dead-code elimination","original":"[[dead-code elimination]]","displayText":"","beforeContext":"Tree shaking is a term commonly used in the JavaScript context for ","afterContext":". It relies on the static structure of ES2015 module syntax, i.e. import and export. The name and concept have been popularized by the ES2015 module bundler rollup."},{"line":0,"link":"static structure","original":"[[static structure]]","displayText":"","beforeContext":"Tree shaking is a term commonly used in the JavaScript context for dead-code elimination. It relies on the ","afterContext":" of ES2015 module syntax, i.e. import and export. The name and concept have been popularized by the ES2015 module bundler rollup."},{"line":133,"link":"missing css import","original":"[[missing css import]]","displayText":"","beforeContext":"","afterContext":"\t]]Note that any imported file is subject to tree shaking. This means if you use something like css-loader in your project and import a CSS file, it needs to be added to the side effect list so it will not be unintentionally dropped in production mode:"}],"embeds":[],"tags":[],"headings":[{"line":4,"heading":"Add a Utility","level":4}]},"ab0c5f445951ee9c27dba134bfe83d6fe4c690e1ed36a48302a9d1d783e94239":{"links":[{"line":4,"link":"polyfill","original":"[[polyfill]]","displayText":"","beforeContext":"Another instance where shimming can be useful is when you want to ","afterContext":" browser functionality to support more users. In this case, you may only want to deliver those polyfills to the browsers that need patching (i.e. load them on demand)."},{"line":19,"link":"ProvidePlugin","original":"[[ProvidePlugin]]","displayText":"","beforeContext":"Remember that lodash package we were using? For demonstration purposes, let’s say we wanted to instead provide this as a global throughout our application. To do this, we can use ","afterContext":"."},{"line":21,"link":"ProvidePlugin","original":"[[ProvidePlugin]]","displayText":"","beforeContext":"The ","afterContext":" makes a package available as a variable in every module compiled through Webpack. If webpack sees that variable used, it will include the given package in the final bundle. Let’s go ahead by removing the import statement for lodash and instead provide it via the plugin"},{"line":21,"link":"Webpack","original":"[[Webpack]]","displayText":"","beforeContext":"The ProvidePlugin makes a package available as a variable in every module compiled through ","afterContext":". If webpack sees that variable used, it will include the given package in the final bundle. Let’s go ahead by removing the import statement for lodash and instead provide it via the plugin"},{"line":104,"link":"Tree Shaking","original":"[[Tree Shaking]]","displayText":"","beforeContext":"This would go nicely with ","afterContext":" as the rest of the lodash library should get dropped."},{"line":125,"link":"imports-loader","original":"[[imports-loader]]","displayText":"","beforeContext":"This becomes a problem when the module is executed in a CommonJS context where this is equal to module.exports. In this case you can override this using the ","afterContext":":"}],"embeds":[],"tags":[],"headings":[{"line":6,"heading":"Shimming Globals","level":3},{"line":107,"heading":"Granular Shimming","level":3}]},"3b137b5ccbe7366b16bef70ce2885f2a33e60fbbe288f0c06aa33505899d8d96":{"links":[],"embeds":[],"tags":[],"headings":[]},"6c897890e92b04d20d28c2f624d009a0a50778cbe7aa1042ec36ebf93923d2f2":{"links":[],"embeds":[],"tags":[],"headings":[]},"c2f5085ebf113a1f94bded73ae0431051c9b660d348f01bef9318538005eee93":{"links":[{"line":39,"link":"async-actions","original":"[[async-actions]]","displayText":"","beforeContext":"Action creators can also be asynchronous and have side-effects. You can read about ","afterContext":" in the advanced tutorial to learn how to handle AJAX responses and compose action creators into async control flow. Don’t skip ahead to async actions until you’ve completed the basics tutorial, as it covers other important concepts that are prerequisite for the advanced tutorial and async actions."}],"embeds":[],"tags":[],"headings":[]},"8798ac71cd648e63022ff1aa183974036c9a7e82f8e10236febbaa957c24b0bc":{"links":[{"line":9,"link":"reducer-composition","original":"[[reducer-composition]]","displayText":"","beforeContext":"It’s important to note that you’ll only have a single store in a Redux application. When you want to split your data handling logic, you’ll use ","afterContext":" instead of many stores."},{"line":13,"link":"data-flow","original":"[[data-flow]]","displayText":"","beforeContext":"","afterContext":""}],"embeds":[],"tags":[],"headings":[]},"76c0690661104790ce601d3827ac25bf92869b85ff04983fcd62fe3b72716681":{"links":[{"line":12,"link":"redux-toolkit","original":"[[redux-toolkit]]","displayText":"","beforeContext":"","afterContext":""},{"line":16,"link":"store","original":"[[store]]","displayText":"","beforeContext":"RTK includes utilities that help simplify many common use cases, including ","afterContext":"-setup, creating reducers and writing immutable update logic, and even creating entire “slices” of state at once."},{"line":26,"link":"reducers","original":"[[reducers]]","displayText":"","beforeContext":"The whole state of your app is stored in an object tree inside a single store. The only way to change the state tree is to emit an action, an object describing what happened. To specify how the actions transform the state tree, you write pure ","afterContext":"."},{"line":28,"link":"actions","original":"[[actions]]","displayText":"","beforeContext":"Instead of mutating the state directly, you specify the mutations you want to happen with plain objects called ","afterContext":". Then you write a special function called a reducers to decide how every action transforms the entire application’s state."},{"line":28,"link":"reducers","original":"[[reducers]]","displayText":"","beforeContext":"Instead of mutating the state directly, you specify the mutations you want to happen with plain objects called actions. Then you write a special function called a ","afterContext":" to decide how every action transforms the entire application’s state."},{"line":38,"link":"reducers","original":"[[reducers]]","displayText":"","beforeContext":". Finally, to tie state and actions together, we write a function called a ","afterContext":".it’s just a function that takes state and action as arguments, and returns the next state of the app."},{"line":51,"link":"actions","original":"[[actions]]","displayText":"","beforeContext":"The only way to change the state is to emit an ","afterContext":", an object describing what happened."}],"embeds":[],"tags":[],"headings":[{"line":2,"heading":"Installation","level":3},{"line":12,"heading":"[[redux-toolkit]]","level":3},{"line":32,"heading":"Core concept","level":3},{"line":41,"heading":"Three Principles","level":3}]},"b490e7fea0538f267a9dc69f8fdd94bf08ceae613e9be16d6c20ffe00802fa14":{"links":[{"line":8,"link":"actions","original":"[[actions]]","displayText":"","beforeContext":"","afterContext":" are plain object describing what happened"},{"line":12,"link":"XHR-callbacks","original":"[[XHR-callbacks]]","displayText":"","beforeContext":"You can call store.dispatch(action) from anywhere in your app, including components and ","afterContext":", or even at scheduled intervals."},{"line":16,"link":"store","original":"[[store]]","displayText":"","beforeContext":"The ","afterContext":" will pass two arguments to the reducers: the current state tree and the action."},{"line":16,"link":"reducers","original":"[[reducers]]","displayText":"","beforeContext":"The store will pass two arguments to the ","afterContext":": the current state tree and the action."},{"line":20,"link":"reducers","original":"[[reducers]]","displayText":"","beforeContext":"The root reducer may combine the output of multiple ","afterContext":" into a single state tree."},{"line":53,"link":"react-redux","original":"[[react-redux]]","displayText":"","beforeContext":"Now, the UI can be updated to reflect the new state. If you use bindings like ","afterContext":", this is the point at which component.setState(newState) is called."}],"embeds":[],"tags":[],"headings":[]},"3ae19da77a9dfe16da9200575c2b4857da08b292ceaf6cf73c658024b56235d6":{"links":[],"embeds":[],"tags":[],"headings":[]},"c46b8e01f7b85e58607005d2ab33fbf075a195b5969febb6a841f74914ca9e31":{"links":[{"line":3,"link":"designing-the-state-shape","original":"[[designing-the-state-shape]]","displayText":"","beforeContext":"","afterContext":"In Redux, all the application state is stored as a single object. It’s a good idea to think of its shape before writing any code. What’s the minimal representation of your app’s state as an object?"},{"line":11,"link":"normalizr","original":"[[normalizr]]","displayText":"","beforeContext":"Note on RelationshipsIn a more complex app, you’re going to want different entities to reference each other. We suggest that you keep your state as normalized as possible, without any nesting. Keep every entity in an object stored with an ID as a key, and use IDs to reference it from other entities, or lists. Think of the app’s state as a database. This approach is described in ","afterContext":"’s documentation in detail. For example, keeping todosById: { id -> todo } and todos: array /<id/> inside the state would be a better idea in a real app, but we’re keeping the example simple."},{"line":30,"link":"actions","original":"[[actions]]","displayText":"","beforeContext":"With this out of the way, let’s start writing our reducer by gradually teaching it to understand the ","afterContext":" we defined earlier."},{"line":175,"link":"reducer-composition","original":"[[reducer-composition]]","displayText":"","beforeContext":"This is called ","afterContext":""}],"embeds":[],"tags":[],"headings":[{"line":2,"heading":"Designing the State Shape","level":3},{"line":14,"heading":"Handling Actions","level":3},{"line":39,"heading":"Handling More Actions","level":3},{"line":92,"heading":"Splitting Reducers","level":3}]},"06baea3eff45df4f575a194e901ee3a014b1a4e1be43c8934bb67c3b29b25d1e":{"links":[],"embeds":[],"tags":[],"headings":[]},"4461b62b597e4b5a5512f57ff91522d4a8f470a045a68795299a7119c8faf94d":{"links":[{"line":0,"link":"presentational-and-container-components","original":"[[presentational-and-container-components]]","displayText":"","beforeContext":"","afterContext":""},{"line":16,"link":"designing-the-state-shape","original":"[[designing-the-state-shape]]","displayText":"","beforeContext":"","afterContext":""},{"line":18,"link":"thinking-in-react","original":"[[thinking-in-react]]","displayText":"","beforeContext":"It’s time we design the UI hierarchy to match it. This is not a Redux-specific task. Thinking in React ","afterContext":"is a great tutorial that explains the process."},{"line":68,"link":"Provider","original":"[[Provider]]","displayText":"","beforeContext":"The option we recommend is to use a special React Redux component called /<","afterContext":"/> to magically make the store available to all container components in the application without passing it explicitly. You only need to use it once when you render the root component:"}],"embeds":[],"tags":[],"headings":[{"line":14,"heading":"Designing Component Hierarchy","level":3},{"line":22,"heading":"Designing Presentational Components","level":4},{"line":40,"heading":"Designing Container Components","level":4},{"line":48,"heading":"Designing Other Components","level":4},{"line":56,"heading":"Implementing Presentational Components","level":4},{"line":58,"heading":"Implementing Container Components","level":4},{"line":64,"heading":"Passing the Store","level":4}]},"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855":{"links":[],"embeds":[],"tags":[],"headings":[]},"86ccf351c0f933dbc0e20dcbbc5525bddc37de927d394703a0baeb168fe4c851":{"links":[{"line":8,"link":"props","original":"[[props]]","displayText":"","beforeContext":"Whereas a component transforms ","afterContext":" into UI, a higher-order component transforms a component into another component."},{"line":8,"link":"component","original":"[[component]]","displayText":"","beforeContext":"Whereas a component transforms props into UI, a higher-order component transforms a ","afterContext":" into another component."},{"line":10,"link":"redux","original":"[[redux]]","displayText":"","beforeContext":"HOCs are common in third-party React libraries, such as ","afterContext":"’s connect and Relay’s createFragmentContainer."},{"line":10,"link":"createFragmentContainer","original":"[[createFragmentContainer]]","displayText":"","beforeContext":"HOCs are common in third-party React libraries, such as redux’s connect and Relay’s ","afterContext":"."},{"line":14,"link":"cross-cutting-concerns","original":"[[cross-cutting-concerns]]","displayText":"","beforeContext":"Use HOCs For ","afterContext":""},{"line":16,"link":"mixins","original":"[[mixins]]","displayText":"","beforeContext":"NoteWe previously recommended mixins as a way to handle cross-cutting concerns. We’ve since realized that mixins create more trouble than they are worth. Read more about why we’ve moved away from ","afterContext":" and how you can transition your existing components."},{"line":101,"link":"setState","original":"[[setState]]","displayText":"","beforeContext":"You can imagine that in a large app, this same pattern of subscribing to DataSource and calling ","afterContext":" will occur over and over again. We want an abstraction that allows us to define this logic in a single place and share it across many components. This is where higher-order components excel."},{"line":117,"link":"wrapped-component","original":"[[wrapped-component]]","displayText":"","beforeContext":"The first parameter is the ","afterContext":". The second parameter retrieves the data we’re interested in, given a DataSource and the current props."},{"line":165,"link":"wrapped-component","original":"[[wrapped-component]]","displayText":"","beforeContext":"Like components, the contract between withSubscription and the ","afterContext":" is entirely props-based. This makes it easy to swap one HOC for a different one, as long as they provide the same props to the wrapped component. This may be useful if you change data-fetching libraries, for example."},{"line":168,"link":"composition","original":"[[composition]]","displayText":"","beforeContext":"Don’t Mutate the Original Component. Use ","afterContext":"."},{"line":187,"link":"lifecycle","original":"[[lifecycle]]","displayText":"","beforeContext":"There are a few problems with this. One is that the input component cannot be reused separately from the enhanced component. More crucially, if you apply another HOC to EnhancedComponent that also mutates componentDidUpdate, the first HOC’s functionality will be overridden! This HOC also won’t work with function components, which do not have ","afterContext":" methods."},{"line":273,"link":"higher-order-function","original":"[[higher-order-function]]","displayText":"","beforeContext":"In other words, connect is a ","afterContext":" that returns a higher-order-components!"},{"line":273,"link":"higher-order-components","original":"[[higher-order-components]]","displayText":"","beforeContext":"In other words, connect is a higher-order-function that returns a ","afterContext":"!"},{"line":320,"link":"reconciliation","original":"[[reconciliation]]","displayText":"","beforeContext":"React’s diffing algorithm (called ","afterContext":") uses component identity to determine whether it should update the existing subtree or throw it away and mount a new one. If the component returned from render is identical (===) to the component from the previous render, React recursively updates the subtree by diffing it with the new one. If they’re not equal, the previous subtree is unmounted completely."},{"line":367,"link":"hoist-non-react-statics","original":"[[hoist-non-react-statics]]","displayText":"","beforeContext":"However, this requires you to know exactly which methods need to be copied. You can use ","afterContext":" to automatically copy all non-React static methods:"},{"line":392,"link":"Refs","original":"[[Refs]]","displayText":"","beforeContext":"","afterContext":" Aren’t Passed Through"},{"line":396,"link":"forwardRef","original":"[[forwardRef]]","displayText":"","beforeContext":"The solution for this problem is to use the React.","afterContext":" API (introduced with React 16.3)."}],"embeds":[],"tags":[],"headings":[{"line":14,"heading":"Use HOCs For [[cross-cutting-concerns]]","level":3},{"line":168,"heading":"Don’t Mutate the Original Component. Use [[composition]].","level":3},{"line":213,"heading":"Convention","level":3},{"line":215,"heading":"Pass Unrelated Props Through to the Wrapped Component","level":4},{"line":243,"heading":"Maximizing Composability","level":4},{"line":296,"heading":"Wrap the Display Name for Easy Debugging","level":4},{"line":314,"heading":"Caveats","level":3},{"line":318,"heading":"Don’t Use HOCs Inside the render Method","level":4},{"line":340,"heading":"Static Methods Must Be Copied Over","level":4},{"line":392,"heading":"[[Refs]] Aren’t Passed Through","level":4}]},"1f644032be5aca1716ef894ac8d59006c00c86a44139b4e5d8433f26b6119371":{"links":[],"embeds":[],"tags":[],"headings":[]},"a64c5d025f0c26544102d0a7d7e2ac525603b7ace75e5de95558b6b90a8c161c":{"links":[{"line":23,"link":"using-the-state-hook","original":"[[using-the-state-hook]]","displayText":"","beforeContext":"Here, useState is a Hook (we’ll talk about what this means in a moment). We call it inside a function component to add some local state to it. React will preserve this state between re-renders. useState returns a pair: the current state value and a function that lets you update it. You can call this function from an event handler or somewhere else. It’s similar to this.setState in a class, except it doesn’t merge the old and new state together. (We’ll show an example comparing useState to this.state in ","afterContext":".)"},{"line":41,"link":"array-destructuring","original":"[[array-destructuring]]","displayText":"","beforeContext":"The ","afterContext":" syntax lets us give different names to the state variables we declared by calling useState. These names aren’t a part of the useState API. Instead, React assumes that if you call useState many times, you do it in the same order during every render. We’ll come back to why this works and when this is useful later."},{"line":51,"link":"using-the-effect-hook","original":"[[using-the-effect-hook]]","displayText":"","beforeContext":"The Effect Hook, useEffect, adds the ability to perform side effects from a function component. It serves the same purpose as componentDidMount, componentDidUpdate, and componentWillUnmount in React classes, but unified into a single API. (We’ll show examples comparing useEffect to these methods in ","afterContext":".)"},{"line":136,"link":"react-function-components","original":"[[react-function-components]]","displayText":"","beforeContext":"Only call Hooks from ","afterContext":". Don’t call Hooks from regular JavaScript functions. (There is just one other valid place to call Hooks — your own custom Hooks. We’ll learn about them in a moment.)"},{"line":192,"link":"stateful-logic","original":"[[stateful-logic]]","displayText":"","beforeContext":"The state of these components is completely independent. Hooks are a way to reuse ","afterContext":", not state itself. In fact, each call to a Hook has a completely isolated state — so you can even use the same custom Hook twice in one component."}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"State Hook","level":3},{"line":28,"heading":"Declaring multiple state variables","level":3},{"line":43,"heading":"But what is a Hook?","level":3},{"line":48,"heading":"⚡️ Effect Hook","level":3},{"line":133,"heading":"✌️ Rules of Hooks","level":3},{"line":138,"heading":"💡Building Your Own Hooks","level":3}]},"53ab3dcda42efe2ff63d96e21b642035c754a32aadade020a6c9e923263ed997":{"links":[{"line":35,"link":"stateless-components","original":"[[stateless-components]]","displayText":"","beforeContext":"You might have previously known these as “","afterContext":"”. We’re now introducing the ability to use React state from these, so we prefer the name react-function-components"},{"line":35,"link":"react-function-components","original":"[[react-function-components]]","displayText":"","beforeContext":"You might have previously known these as “stateless-components”. We’re now introducing the ability to use React state from these, so we prefer the name ","afterContext":""},{"line":54,"link":"rules-of-hooks","original":"[[rules-of-hooks]]","displayText":"","beforeContext":"","afterContext":""},{"line":91,"link":"rules-of-hooks","original":"[[rules-of-hooks]]","displayText":"","beforeContext":"“Create” wouldn’t be quite accurate because the state is only created the first time our component renders. During the next renders, useState gives us the current state. Otherwise it wouldn’t be “state” at all! There’s also a reason why Hook names always start with use. ","afterContext":""}],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"Equivalent Class Example","level":3},{"line":37,"heading":"What’s a Hook","level":3},{"line":56,"heading":"Declaring a State Variable","level":3},{"line":93,"heading":"Reading State","level":3},{"line":146,"heading":"Tip: Using Multiple State Variables","level":3}]},"25faa155ee521ac7ec6266c12887f2ceab76b8c6a173e920dfea988100e03e60":{"links":[{"line":409,"link":"hook-FAQ","original":"[[hook-FAQ]]","displayText":"","beforeContext":"We recommend using the exhaustive-deps rule as part of our eslint-plugin-react-hooks package. It warns when dependencies are specified incorrectly and suggests a fix.","afterContext":""},{"line":411,"link":"rules-of-hooks","original":"[[rules-of-hooks]]","displayText":"","beforeContext":"","afterContext":""}],"embeds":[],"tags":[],"headings":[{"line":27,"heading":"Effects Without Cleanup","level":3},{"line":31,"heading":"Example Using Classes","level":4},{"line":67,"heading":"Example Using Hooks","level":4},{"line":96,"heading":"Detailed Explanation","level":3},{"line":115,"heading":"Effects with Cleanup","level":3},{"line":119,"heading":"Example Using Classes","level":4},{"line":160,"heading":"Example Using Hooks","level":4},{"line":194,"heading":"Recap","level":3},{"line":212,"heading":"Tips for Using Effects","level":3},{"line":214,"heading":"Use Multiple Effects to Separate Concerns","level":4},{"line":278,"heading":"Explanation: Why Effects Run on Each Update","level":3},{"line":363,"heading":"Optimizing Performance by Skipping Effects","level":4}]},"25883759c3a0f2dd9588e2b550813386eefb9ce625a5681991598988ecc130c8":{"links":[],"embeds":[],"tags":[],"headings":[{"line":9,"heading":"ESLint Plugin","level":3},{"line":25,"heading":"Explanation","level":3}]},"59f4efe96a8028b069b52e364d4a188ec48ca647f093971d93cb3b1af038383d":{"links":[{"line":234,"link":"hooks-API-reference","original":"[[hooks-API-reference]]","displayText":"","beforeContext":"The need to manage local state with a reducer in a complex component is common enough that we’ve built the useReducer Hook right into React. You’ll find it together with other built-in Hooks in the ","afterContext":"."}],"embeds":[],"tags":[],"headings":[{"line":55,"heading":"Extracting a Custom Hook","level":3},{"line":99,"heading":"Using a Custom Hook","level":3},{"line":134,"heading":"Tip:","level":3},{"line":136,"heading":"Pass Information Between Hooks","level":4},{"line":180,"heading":"useYourImagination()","level":4}]},"15fbfc261c8c41e3db8d9c60443c8e76a5f710a7511c5ea1ffe9a046b589e286":{"links":[{"line":0,"link":"the-gradual-adoption-strategy","original":"[[the-gradual-adoption-strategy]]","displayText":"","beforeContext":"","afterContext":""},{"line":2,"link":"props","original":"[[props]]","displayText":"","beforeContext":"Hooks provide a more direct API to the React concepts you already know: ","afterContext":", state, context, refs, and react-lifecycle"},{"line":2,"link":"state","original":"[[state]]","displayText":"","beforeContext":"Hooks provide a more direct API to the React concepts you already know: props, ","afterContext":", context, refs, and react-lifecycle"},{"line":2,"link":"context","original":"[[context]]","displayText":"","beforeContext":"Hooks provide a more direct API to the React concepts you already know: props, state, ","afterContext":", refs, and react-lifecycle"},{"line":2,"link":"refs","original":"[[refs]]","displayText":"","beforeContext":"Hooks provide a more direct API to the React concepts you already know: props, state, context, ","afterContext":", and react-lifecycle"},{"line":2,"link":"react-lifecycle","original":"[[react-lifecycle]]","displayText":"","beforeContext":"Hooks provide a more direct API to the React concepts you already know: props, state, context, refs, and ","afterContext":""},{"line":6,"link":"render-props","original":"[[render-props]]","displayText":"","beforeContext":"React doesn’t offer a way to “attach” reusable behavior to a component (for example, connecting it to a store). If you’ve worked with React for a while, you may be familiar with patterns like ","afterContext":" and higher-order-components  that try to solve this. But these patterns require you to restructure your components when you use them, which can be cumbersome and make code harder to follow. If you look at a typical React application in react-dev-tools"},{"line":6,"link":"higher-order-components","original":"[[higher-order-components]]","displayText":"","beforeContext":"React doesn’t offer a way to “attach” reusable behavior to a component (for example, connecting it to a store). If you’ve worked with React for a while, you may be familiar with patterns like render-props and ","afterContext":"  that try to solve this. But these patterns require you to restructure your components when you use them, which can be cumbersome and make code harder to follow. If you look at a typical React application in react-dev-tools"},{"line":6,"link":"react-dev-tools","original":"[[react-dev-tools]]","displayText":"","beforeContext":"React doesn’t offer a way to “attach” reusable behavior to a component (for example, connecting it to a store). If you’ve worked with React for a while, you may be familiar with patterns like render-props and higher-order-components  that try to solve this. But these patterns require you to restructure your components when you use them, which can be cumbersome and make code harder to follow. If you look at a typical React application in ","afterContext":""},{"line":8,"link":"wrapper-hell","original":"[[wrapper-hell]]","displayText":"","beforeContext":"you will likely find a “","afterContext":"” of components surrounded by layers of react-redux-providers, consumers, higher-order components, render props, and other abstractions. While we could filter them out in DevTools, this points to a deeper underlying problem: React needs a better primitive for sharing stateful logic.using-the-state-hookWith Hooks, you can extract stateful-logic from a component so it can be tested independently and reused. Hooks allow you to reuse stateful logic without changing your component hierarchy. This makes it easy to share Hooks among many components or with the community."},{"line":8,"link":"react-redux-providers","original":"[[react-redux-providers]]","displayText":"","beforeContext":"you will likely find a “wrapper-hell” of components surrounded by layers of ","afterContext":", consumers, higher-order components, render props, and other abstractions. While we could filter them out in DevTools, this points to a deeper underlying problem: React needs a better primitive for sharing stateful logic.using-the-state-hookWith Hooks, you can extract stateful-logic from a component so it can be tested independently and reused. Hooks allow you to reuse stateful logic without changing your component hierarchy. This makes it easy to share Hooks among many components or with the community."},{"line":8,"link":"using-the-state-hook","original":"[[using-the-state-hook]]","displayText":"","beforeContext":"you will likely find a “wrapper-hell” of components surrounded by layers of react-redux-providers, consumers, higher-order components, render props, and other abstractions. While we could filter them out in DevTools, this points to a deeper underlying problem: React needs a better primitive for sharing stateful logic.","afterContext":"With Hooks, you can extract stateful-logic from a component so it can be tested independently and reused. Hooks allow you to reuse stateful logic without changing your component hierarchy. This makes it easy to share Hooks among many components or with the community."},{"line":8,"link":"stateful-logic","original":"[[stateful-logic]]","displayText":"","beforeContext":"you will likely find a “wrapper-hell” of components surrounded by layers of react-redux-providers, consumers, higher-order components, render props, and other abstractions. While we could filter them out in DevTools, this points to a deeper underlying problem: React needs a better primitive for sharing stateful logic.using-the-state-hookWith Hooks, you can extract ","afterContext":" from a component so it can be tested independently and reused. Hooks allow you to reuse stateful logic without changing your component hierarchy. This makes it easy to share Hooks among many components or with the community."},{"line":12,"link":"building-your-own-hooks","original":"[[building-your-own-hooks]]","displayText":"","beforeContext":"","afterContext":""},{"line":18,"link":"using-the-effect-hook","original":"[[using-the-effect-hook]]","displayText":"","beforeContext":"To solve this, Hooks let you split one component into smaller functions based on what pieces are related (such as setting up a subscription or fetching data), rather than forcing a split based on lifecycle methods. You may also opt into managing the component’s local state with a reducer to make it more predictable. ","afterContext":""},{"line":22,"link":"hooks-at-a-glance","original":"[[hooks-at-a-glance]]","displayText":"","beforeContext":"","afterContext":""},{"line":24,"link":"thinking-in-hooks","original":"[[thinking-in-hooks]]","displayText":"","beforeContext":"","afterContext":""},{"line":26,"link":"building-your-own-hooks","original":"[[building-your-own-hooks]]","displayText":"","beforeContext":"","afterContext":""},{"line":28,"link":"rules-of-hooks","original":"[[rules-of-hooks]]","displayText":"","beforeContext":"","afterContext":"hooks-API-reference"},{"line":28,"link":"hooks-API-reference","original":"[[hooks-API-reference]]","displayText":"","beforeContext":"rules-of-hooks","afterContext":""}],"embeds":[],"tags":[],"headings":[{"line":4,"heading":"It’s hard to reuse stateful logic between components","level":3},{"line":14,"heading":"Complex components become hard to understand","level":3},{"line":20,"heading":"Classes confuse both people and machines","level":3}]},"a7d36d0473057b755f821fee394d86c61a5bf773ca574e22bacdbb6b3746d1d7":{"links":[],"embeds":[],"tags":[],"headings":[]},"51ea1660532d16dc498ac0909722dab2bacc0ab451c5f1283eb9a18cb6395ccd":{"links":[{"line":0,"link":"basic-hooks","original":"[[basic-hooks]]","displayText":"","beforeContext":"","afterContext":""},{"line":3,"link":"additional-hooks","original":"[[additional-hooks]]","displayText":"","beforeContext":"","afterContext":""}],"embeds":[],"tags":[],"headings":[]},"e93321e9b6d8d7cbe58424f9a01092b71ac23368ca4e85c7b08c3937965ff6de":{"links":[{"line":0,"link":"useReducer","original":"[[useReducer]]","displayText":"","beforeContext":"","afterContext":""},{"line":1,"link":"useCallback","original":"[[useCallback]]","displayText":"","beforeContext":"","afterContext":""},{"line":2,"link":"useMemo","original":"[[useMemo]]","displayText":"","beforeContext":"","afterContext":""},{"line":3,"link":"useRef","original":"[[useRef]]","displayText":"","beforeContext":"","afterContext":""},{"line":4,"link":"useImperativeHandle","original":"[[useImperativeHandle]]","displayText":"","beforeContext":"","afterContext":""},{"line":5,"link":"useLayoutEffect","original":"[[useLayoutEffect]]","displayText":"","beforeContext":"","afterContext":""},{"line":6,"link":"useDebugValue","original":"[[useDebugValue]]","displayText":"","beforeContext":"","afterContext":""}],"embeds":[],"tags":[],"headings":[]},"c848c7c3a9fcf7c6fe4c6476aa490578602b2768c9072fe0c22aeabf7c0332c5":{"links":[{"line":0,"link":"redux","original":"[[redux]]","displayText":"","beforeContext":"","afterContext":""}],"embeds":[],"tags":[],"headings":[]}},"algorithmVersion":9}